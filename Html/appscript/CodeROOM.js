// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown list
function getProductionLists10s(jwtToken) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return { result: verifyToken };
  } else {
    let folderId10s = globalVariables().folderId10s;
    let folder10s = DriveApp.getFolderById(folderId10s);
    let contents10s = folder10s.getFiles();
    let sheetLists10s = [];

    const fileType = "application/vnd.google-apps.spreadsheet";
    if (verifyToken.userData.role != "Operator") {
      while (contents10s.hasNext()) {
        let file = contents10s.next();
        if (file.getMimeType() === fileType) {
          const tablet_name = file.getName().toUpperCase();
          const tablet_url_10s = file.getUrl();
          sheetLists10s.push({
            name: tablet_name,
            url: tablet_url_10s,
          });
        }
      }
    }

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    sheetLists10s = sheetLists10s.sort((item1, item2) => {
      const date1Parts = item1.name.split("_").pop().split("/");
      const date2Parts = item2.name.split("_").pop().split("/");
      const date1 = new Date(
        `${date1Parts[2]}-${date1Parts[1]}-${date1Parts[0]}`
      );
      const date2 = new Date(
        `${date2Parts[2]}-${date2Parts[1]}-${date2Parts[0]}`
      );
      return date1 - date2;
    });

    let ssMain = SpreadsheetApp.getActiveSpreadsheet();
    let shTabetList = ssMain.getSheetByName(globalVariables().shTabetList);

    let lists = shTabetList.getDataRange().getDisplayValues().slice(1);
    lists.reverse().forEach((data) => {
      const tablet_name = data[0].toUpperCase();
      const tablet_url_10s = data[3];
      sheetLists10s.push({
        name: `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${tablet_name} (LOT. ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)`,
        url: tablet_url_10s,
      });
    });

    return { result: verifyToken, productionLists: sheetLists10s };
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏à‡∏≤‡∏Å url ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï 10 ‡πÄ‡∏°‡πá‡∏î
function getWeighingData10s({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return verifyToken.message;
  } else {
    // const url = "https://docs.google.com/spreadsheets/d/1XySGAC8aaywquHFKwr_zBBDpOgj99CF15UHe3P3kYF8/edit?usp=sharing"
    const spreadsheet = SpreadsheetApp.openByUrl(url); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Spreadsheet
    const data_setting = spreadsheet
      .getSheetByName(globalVariables().shSetWeight) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    const data_weighing = spreadsheet
      .getSheetByName(globalVariables().shWeight10s) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(2); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    const data_remarks = spreadsheet
      .getSheetByName(globalVariables().shRemarks) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet remarks
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const settingDetail = {
      productName: data_setting[0][1], // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      lot: data_setting[1][1], // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï
      balanceID: data_setting[2][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á
      tabletID: data_setting[3][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å
      meanWeight: data_setting[4][1], // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏§‡∏©‡∏é‡∏µ
      percentWeightVariation: data_setting[5][1], // ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô
      meanWeightMin: data_setting[6][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 10 ‡πÄ‡∏°‡πá‡∏î(Min.)
      meanWeightMax: data_setting[7][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 10 ‡πÄ‡∏°‡πá‡∏î(Max.)
      meanWeightRegMin: data_setting[8][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Min.)
      meanWeightRegMax: data_setting[9][1], // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (Max.)
      thicknessMin: data_setting[10][1], // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤(Min.)
      thicknessMax: data_setting[11][1], // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤(Max.)
      prepared: data_setting[12][1], // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢
      approved: data_setting[13][1], // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢
      finished: data_setting[14][1], // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏î‡∏¢
      finishTime: data_setting[15][1], // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    let weighingData = [];
    data_weighing.forEach((row) => {
      const rowData = {
        timestamp: row[0],
        type: row[1],
        weight1: row[2],
        weight2: row[3],
        characteristics: row[4],
        operator: row[5],
        inspector: row[6],
        thickness: [],
      };

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤
      for (let i = 0; i < 10; i++) {
        rowData.thickness.push(row[7 + i]);
      }

      // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô dataObj
      weighingData.push(rowData);
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ remarks
    let remarksData = [];
    data_remarks.forEach((row) => {
      const rowData = {
        timestamp: row[0],
        issues: row[1],
        cause: row[2],
        resolve: row[3],
        notes: row[4],
        recorder: row[5],
        role: row[6],
      };

      // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô dataObj
      remarksData.push(rowData);
    });

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const dataset = {
      settingDetail: settingDetail,
      weighingData: weighingData.reverse(),
      remarksData: remarksData.reverse(),
    };

    return { result: verifyToken, dataset: dataset };
  }
}

// ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
function signInToCheckTheSettings10s({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return verifyToken.message;
  } else {
    const spreadsheet = SpreadsheetApp.openByUrl(url);
    const sheet = spreadsheet.getSheetByName(globalVariables().shSetWeight); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á sheet ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const data_setting = sheet
      .getDataRange() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet
      .getDisplayValues() // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      .slice(1); // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏¥‡πâ‡∏á

    // ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    sheet
      .getRange(globalVariables().approvedRange10s)
      .setValue(verifyToken.userData.nameTH);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏≤
    const settingDetail = {
      productName: data_setting[0][1], // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      lot: data_setting[1][1], // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï
      tabletID: data_setting[3][1], // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
    const details = `‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á 10 ‡πÄ‡∏°‡πá‡∏î\
                    \n‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ${settingDetail.productName}\
                    \n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï ${settingDetail.lot}\
                    \n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${settingDetail.tabletID}`;

    recordAuditTrailData({
      list: "‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      details: details,
      username: verifyToken.userData.nameTH,
      role: verifyToken.userData.role,
    });

    const timestamp = new Date().toLocaleString("en-GB", {
      timeZone: "Asia/Bangkok",
    });
    const approval_msg = `üåà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á 10 ‡πÄ‡∏°‡πá‡∏î\n
                        \nüî∞‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ${settingDetail.productName}\
                        \nüî∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï ${settingDetail.lot}\
                        \nüî∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å ${settingDetail.tabletID}\n
                        \n‚™º ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢\
                        \n‚™º ‡∏Ñ‡∏∏‡∏ì ${verifyToken.userData.nameTH}\
                        \n‚™º ${timestamp}`;

    sendLineNotify(approval_msg, globalVariables().approval_token);
    return { result: verifyToken };
  }
}

// ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
function signInToCheckTheWeighingData({ url, jwtToken }) {
  const verifyToken = validateToken(jwtToken);

  if (verifyToken.message != "success") {
    return verifyToken.message;
  } else {
    const spreadsheet = SpreadsheetApp.openByUrl(url);
    const sheet = spreadsheet.getSheetByName(globalVariables().shWeight10s);
    const row = sheet.getLastRow();
    sheet
      .getRange(row, globalVariables().inspectorCol)
      .setValue(verifyToken.userData.nameTH);

    return { result: verifyToken, inspectorName: verifyToken.userData.nameTH };
  }
}

// ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
function endJob_10s(url, username) {
  let spreadsheet = SpreadsheetApp.openByUrl(url);
  let today = new Date().toLocaleString("en-GB", { timeZone: "Asia/Bangkok" });
  let date = today.split(",")[0];

  let shSetWeight = spreadsheet.getSheetByName(globalVariables().shSetWeight);
  let tabletID = shSetWeight.getRange("A2").getDisplayValue();
  let productName = shSetWeight.getRange("A4").getDisplayValue();
  let lot = shSetWeight.getRange("A5").getDisplayValue();

  // Set number format
  let shData = spreadsheet.getSheetByName(globalVariables().shWeight10s);
  shData.getRange("C5:E").setNumberFormat("0.000");
  shData.getRange("J5:S").setNumberFormat("0.00");

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î ENDJOB
  shSetWeight
    .getRange(globalVariables().checkEndjobRange10s)
    .setValue("‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏î‡∏¢ " + username + " ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + today);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
  let detail = `‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á: 10 ‡πÄ‡∏°‡πá‡∏î\
                \n‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤: ${productName}\
                \n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï: ${lot}\
                \n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏≠‡∏Å: ${tabletID}`;

  audit_trail("‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", detail, username);

  // ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
  let folder = DriveApp.getFolderById(globalVariables().folderId10s);
  let newSh = spreadsheet.copy(`${lot}_${productName}_${tabletID}_${date}`);
  let shID = newSh.getId(); // get newSheetID
  let file = DriveApp.getFileById(shID);

  folder.addFile(file); // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ü‡πâ‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

  // ‡∏•‡∏ö‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏µ‡∏ï‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏≠‡∏Å
  let shName = spreadsheet.getSheets();
  for (i = 0; i < shName.length; i++) {
    let sh = shName[i].getName();
    if (sh == "WEIGHT" || sh == "‡∏Å‡∏£‡∏≤‡∏ü" || sh == "Remark" || sh == "Setting") {
      continue;
    } else {
      spreadsheet.deleteSheet(shName[i]);
    }
  }

  spreadsheet
    .getSheetByName(globalVariables().shWeight10s)
    .getRange("A5:S")
    .clearContent();
  spreadsheet
    .getSheetByName(globalVariables().shRemarks)
    .getRange("A3:F")
    .clearContent();
  spreadsheet
    .getSheetByName(globalVariables().shSetWeight)
    .getRange("A3:A16")
    .setValue("xxxxx");

  return getCurrentData_10s(url);
}
